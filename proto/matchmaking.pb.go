// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: proto/matchmaking.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ─────────────── ENUMS ───────────────
type PlayerState int32

const (
	PlayerState_PLAYER_STATE_IDLE     PlayerState = 0
	PlayerState_PLAYER_STATE_IN_QUEUE PlayerState = 1
	PlayerState_PLAYER_STATE_IN_MATCH PlayerState = 2
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0: "PLAYER_STATE_IDLE",
		1: "PLAYER_STATE_IN_QUEUE",
		2: "PLAYER_STATE_IN_MATCH",
	}
	PlayerState_value = map[string]int32{
		"PLAYER_STATE_IDLE":     0,
		"PLAYER_STATE_IN_QUEUE": 1,
		"PLAYER_STATE_IN_MATCH": 2,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_matchmaking_proto_enumTypes[0].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_proto_matchmaking_proto_enumTypes[0]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{0}
}

type ServerState int32

const (
	ServerState_SERVER_STATE_UNKNOWN   ServerState = 0
	ServerState_SERVER_STATE_AVAILABLE ServerState = 1
	ServerState_SERVER_STATE_BUSY      ServerState = 2
	ServerState_SERVER_STATE_DOWN      ServerState = 3
)

// Enum value maps for ServerState.
var (
	ServerState_name = map[int32]string{
		0: "SERVER_STATE_UNKNOWN",
		1: "SERVER_STATE_AVAILABLE",
		2: "SERVER_STATE_BUSY",
		3: "SERVER_STATE_DOWN",
	}
	ServerState_value = map[string]int32{
		"SERVER_STATE_UNKNOWN":   0,
		"SERVER_STATE_AVAILABLE": 1,
		"SERVER_STATE_BUSY":      2,
		"SERVER_STATE_DOWN":      3,
	}
)

func (x ServerState) Enum() *ServerState {
	p := new(ServerState)
	*p = x
	return p
}

func (x ServerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_matchmaking_proto_enumTypes[1].Descriptor()
}

func (ServerState) Type() protoreflect.EnumType {
	return &file_proto_matchmaking_proto_enumTypes[1]
}

func (x ServerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerState.Descriptor instead.
func (ServerState) EnumDescriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{1}
}

// ──────────── UTILIDADES ─────────────
type VectorClock struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cada posición corresponde a la “vista” causal de una entidad.
	Entries       []uint32 `protobuf:"varint,1,rep,packed,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	mi := &file_proto_matchmaking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{0}
}

func (x *VectorClock) GetEntries() []uint32 {
	if x != nil {
		return x.Entries
	}
	return nil
}

// ─────────── MENSAJES JUGADOR ─────────
type PlayerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	GameMode      string                 `protobuf:"bytes,2,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"` // e.g. "1v1"
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerInfoRequest) Reset() {
	*x = PlayerInfoRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfoRequest) ProtoMessage() {}

func (x *PlayerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfoRequest.ProtoReflect.Descriptor instead.
func (*PlayerInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInfoRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerInfoRequest) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *PlayerInfoRequest) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type QueuePlayerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueuePlayerResponse) Reset() {
	*x = QueuePlayerResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueuePlayerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePlayerResponse) ProtoMessage() {}

func (x *QueuePlayerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePlayerResponse.ProtoReflect.Descriptor instead.
func (*QueuePlayerResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{2}
}

func (x *QueuePlayerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *QueuePlayerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QueuePlayerResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type PlayerStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusRequest) Reset() {
	*x = PlayerStatusRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusRequest) ProtoMessage() {}

func (x *PlayerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusRequest.ProtoReflect.Descriptor instead.
func (*PlayerStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerStatusRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerStatusRequest) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type PlayerStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         PlayerState            `protobuf:"varint,1,opt,name=state,proto3,enum=matchmaking.PlayerState" json:"state,omitempty"`
	MatchId       string                 `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ServerAddr    string                 `protobuf:"bytes,3,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,4,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerStatusResponse) Reset() {
	*x = PlayerStatusResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStatusResponse) ProtoMessage() {}

func (x *PlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*PlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerStatusResponse) GetState() PlayerState {
	if x != nil {
		return x.State
	}
	return PlayerState_PLAYER_STATE_IDLE
}

func (x *PlayerStatusResponse) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *PlayerStatusResponse) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *PlayerStatusResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

// ───────────── MENSAJES SERVER ────────
type AssignMatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MatchId       string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PlayerIds     []string               `protobuf:"bytes,2,rep,name=player_ids,json=playerIds,proto3" json:"player_ids,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignMatchRequest) Reset() {
	*x = AssignMatchRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchRequest) ProtoMessage() {}

func (x *AssignMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchRequest.ProtoReflect.Descriptor instead.
func (*AssignMatchRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{5}
}

func (x *AssignMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *AssignMatchRequest) GetPlayerIds() []string {
	if x != nil {
		return x.PlayerIds
	}
	return nil
}

func (x *AssignMatchRequest) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type AssignMatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignMatchResponse) Reset() {
	*x = AssignMatchResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignMatchResponse) ProtoMessage() {}

func (x *AssignMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignMatchResponse.ProtoReflect.Descriptor instead.
func (*AssignMatchResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{6}
}

func (x *AssignMatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AssignMatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AssignMatchResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type ServerStatusUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	NewState      ServerState            `protobuf:"varint,2,opt,name=new_state,json=newState,proto3,enum=matchmaking.ServerState" json:"new_state,omitempty"`
	Address       string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // host:port de GameServer
	Clock         *VectorClock           `protobuf:"bytes,4,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateRequest) Reset() {
	*x = ServerStatusUpdateRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateRequest) ProtoMessage() {}

func (x *ServerStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{7}
}

func (x *ServerStatusUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetNewState() ServerState {
	if x != nil {
		return x.NewState
	}
	return ServerState_SERVER_STATE_UNKNOWN
}

func (x *ServerStatusUpdateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerStatusUpdateRequest) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type ServerStatusUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusUpdateResponse) Reset() {
	*x = ServerStatusUpdateResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusUpdateResponse) ProtoMessage() {}

func (x *ServerStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{8}
}

func (x *ServerStatusUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ServerStatusUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServerStatusUpdateResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{9}
}

func (x *PingRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alive         bool                   `protobuf:"varint,1,opt,name=alive,proto3" json:"alive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{10}
}

func (x *PingResponse) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

// ──────────── MENSAJES ADMIN ──────────
type AdminRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminRequest) Reset() {
	*x = AdminRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminRequest) ProtoMessage() {}

func (x *AdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminRequest.ProtoReflect.Descriptor instead.
func (*AdminRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{11}
}

type ServerInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ServerId       string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	State          ServerState            `protobuf:"varint,2,opt,name=state,proto3,enum=matchmaking.ServerState" json:"state,omitempty"`
	Address        string                 `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CurrentMatchId string                 `protobuf:"bytes,4,opt,name=current_match_id,json=currentMatchId,proto3" json:"current_match_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ServerInfo) Reset() {
	*x = ServerInfo{}
	mi := &file_proto_matchmaking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfo) ProtoMessage() {}

func (x *ServerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfo.ProtoReflect.Descriptor instead.
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{12}
}

func (x *ServerInfo) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ServerInfo) GetState() ServerState {
	if x != nil {
		return x.State
	}
	return ServerState_SERVER_STATE_UNKNOWN
}

func (x *ServerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ServerInfo) GetCurrentMatchId() string {
	if x != nil {
		return x.CurrentMatchId
	}
	return ""
}

type PlayerQueueEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	QueuedSince   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=queued_since,json=queuedSince,proto3" json:"queued_since,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerQueueEntry) Reset() {
	*x = PlayerQueueEntry{}
	mi := &file_proto_matchmaking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQueueEntry) ProtoMessage() {}

func (x *PlayerQueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQueueEntry.ProtoReflect.Descriptor instead.
func (*PlayerQueueEntry) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{13}
}

func (x *PlayerQueueEntry) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerQueueEntry) GetQueuedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.QueuedSince
	}
	return nil
}

type SystemStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*ServerInfo          `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	Players       []*PlayerQueueEntry    `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemStatusResponse) Reset() {
	*x = SystemStatusResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusResponse) ProtoMessage() {}

func (x *SystemStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{14}
}

func (x *SystemStatusResponse) GetServers() []*ServerInfo {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *SystemStatusResponse) GetPlayers() []*PlayerQueueEntry {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SystemStatusResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type AdminServerUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ForcedState   ServerState            `protobuf:"varint,2,opt,name=forced_state,json=forcedState,proto3,enum=matchmaking.ServerState" json:"forced_state,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminServerUpdateRequest) Reset() {
	*x = AdminServerUpdateRequest{}
	mi := &file_proto_matchmaking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminServerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminServerUpdateRequest) ProtoMessage() {}

func (x *AdminServerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminServerUpdateRequest.ProtoReflect.Descriptor instead.
func (*AdminServerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{15}
}

func (x *AdminServerUpdateRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AdminServerUpdateRequest) GetForcedState() ServerState {
	if x != nil {
		return x.ForcedState
	}
	return ServerState_SERVER_STATE_UNKNOWN
}

func (x *AdminServerUpdateRequest) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

type AdminUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Clock         *VectorClock           `protobuf:"bytes,3,opt,name=clock,proto3" json:"clock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdminUpdateResponse) Reset() {
	*x = AdminUpdateResponse{}
	mi := &file_proto_matchmaking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateResponse) ProtoMessage() {}

func (x *AdminUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_matchmaking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateResponse) Descriptor() ([]byte, []int) {
	return file_proto_matchmaking_proto_rawDescGZIP(), []int{16}
}

func (x *AdminUpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AdminUpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AdminUpdateResponse) GetClock() *VectorClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

var File_proto_matchmaking_proto protoreflect.FileDescriptor

const file_proto_matchmaking_proto_rawDesc = "" +
	"\n" +
	"\x17proto/matchmaking.proto\x12\vmatchmaking\x1a\x1fgoogle/protobuf/timestamp.proto\"'\n" +
	"\vVectorClock\x12\x18\n" +
	"\aentries\x18\x01 \x03(\rR\aentries\"}\n" +
	"\x11PlayerInfoRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12\x1b\n" +
	"\tgame_mode\x18\x02 \x01(\tR\bgameMode\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"y\n" +
	"\x13QueuePlayerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"b\n" +
	"\x13PlayerStatusRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12.\n" +
	"\x05clock\x18\x02 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"\xb2\x01\n" +
	"\x14PlayerStatusResponse\x12.\n" +
	"\x05state\x18\x01 \x01(\x0e2\x18.matchmaking.PlayerStateR\x05state\x12\x19\n" +
	"\bmatch_id\x18\x02 \x01(\tR\amatchId\x12\x1f\n" +
	"\vserver_addr\x18\x03 \x01(\tR\n" +
	"serverAddr\x12.\n" +
	"\x05clock\x18\x04 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"~\n" +
	"\x12AssignMatchRequest\x12\x19\n" +
	"\bmatch_id\x18\x01 \x01(\tR\amatchId\x12\x1d\n" +
	"\n" +
	"player_ids\x18\x02 \x03(\tR\tplayerIds\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"y\n" +
	"\x13AssignMatchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"\xb9\x01\n" +
	"\x19ServerStatusUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x125\n" +
	"\tnew_state\x18\x02 \x01(\x0e2\x18.matchmaking.ServerStateR\bnewState\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12.\n" +
	"\x05clock\x18\x04 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"\x80\x01\n" +
	"\x1aServerStatusUpdateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"*\n" +
	"\vPingRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\"$\n" +
	"\fPingResponse\x12\x14\n" +
	"\x05alive\x18\x01 \x01(\bR\x05alive\"\x0e\n" +
	"\fAdminRequest\"\x9d\x01\n" +
	"\n" +
	"ServerInfo\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12.\n" +
	"\x05state\x18\x02 \x01(\x0e2\x18.matchmaking.ServerStateR\x05state\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\tR\aaddress\x12(\n" +
	"\x10current_match_id\x18\x04 \x01(\tR\x0ecurrentMatchId\"n\n" +
	"\x10PlayerQueueEntry\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\tR\bplayerId\x12=\n" +
	"\fqueued_since\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vqueuedSince\"\xb2\x01\n" +
	"\x14SystemStatusResponse\x121\n" +
	"\aservers\x18\x01 \x03(\v2\x17.matchmaking.ServerInfoR\aservers\x127\n" +
	"\aplayers\x18\x02 \x03(\v2\x1d.matchmaking.PlayerQueueEntryR\aplayers\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"\xa4\x01\n" +
	"\x18AdminServerUpdateRequest\x12\x1b\n" +
	"\tserver_id\x18\x01 \x01(\tR\bserverId\x12;\n" +
	"\fforced_state\x18\x02 \x01(\x0e2\x18.matchmaking.ServerStateR\vforcedState\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock\"y\n" +
	"\x13AdminUpdateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12.\n" +
	"\x05clock\x18\x03 \x01(\v2\x18.matchmaking.VectorClockR\x05clock*Z\n" +
	"\vPlayerState\x12\x15\n" +
	"\x11PLAYER_STATE_IDLE\x10\x00\x12\x19\n" +
	"\x15PLAYER_STATE_IN_QUEUE\x10\x01\x12\x19\n" +
	"\x15PLAYER_STATE_IN_MATCH\x10\x02*q\n" +
	"\vServerState\x12\x18\n" +
	"\x14SERVER_STATE_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16SERVER_STATE_AVAILABLE\x10\x01\x12\x15\n" +
	"\x11SERVER_STATE_BUSY\x10\x02\x12\x15\n" +
	"\x11SERVER_STATE_DOWN\x10\x032\xf5\x02\n" +
	"\x11MatchmakerService\x12O\n" +
	"\vQueuePlayer\x12\x1e.matchmaking.PlayerInfoRequest\x1a .matchmaking.QueuePlayerResponse\x12V\n" +
	"\x0fGetPlayerStatus\x12 .matchmaking.PlayerStatusRequest\x1a!.matchmaking.PlayerStatusResponse\x12T\n" +
	"\x14AdminGetSystemStatus\x12\x19.matchmaking.AdminRequest\x1a!.matchmaking.SystemStatusResponse\x12a\n" +
	"\x16AdminUpdateServerState\x12%.matchmaking.AdminServerUpdateRequest\x1a .matchmaking.AdminUpdateResponse2\x8f\x02\n" +
	"\x11GameServerService\x12P\n" +
	"\vAssignMatch\x12\x1f.matchmaking.AssignMatchRequest\x1a .matchmaking.AssignMatchResponse\x12e\n" +
	"\x12UpdateServerStatus\x12&.matchmaking.ServerStatusUpdateRequest\x1a'.matchmaking.ServerStatusUpdateResponse\x12A\n" +
	"\n" +
	"PingServer\x12\x18.matchmaking.PingRequest\x1a\x19.matchmaking.PingResponseB#Z!github.com/vimsent/L3/proto;protob\x06proto3"

var (
	file_proto_matchmaking_proto_rawDescOnce sync.Once
	file_proto_matchmaking_proto_rawDescData []byte
)

func file_proto_matchmaking_proto_rawDescGZIP() []byte {
	file_proto_matchmaking_proto_rawDescOnce.Do(func() {
		file_proto_matchmaking_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_matchmaking_proto_rawDesc), len(file_proto_matchmaking_proto_rawDesc)))
	})
	return file_proto_matchmaking_proto_rawDescData
}

var file_proto_matchmaking_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_matchmaking_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_matchmaking_proto_goTypes = []any{
	(PlayerState)(0),                   // 0: matchmaking.PlayerState
	(ServerState)(0),                   // 1: matchmaking.ServerState
	(*VectorClock)(nil),                // 2: matchmaking.VectorClock
	(*PlayerInfoRequest)(nil),          // 3: matchmaking.PlayerInfoRequest
	(*QueuePlayerResponse)(nil),        // 4: matchmaking.QueuePlayerResponse
	(*PlayerStatusRequest)(nil),        // 5: matchmaking.PlayerStatusRequest
	(*PlayerStatusResponse)(nil),       // 6: matchmaking.PlayerStatusResponse
	(*AssignMatchRequest)(nil),         // 7: matchmaking.AssignMatchRequest
	(*AssignMatchResponse)(nil),        // 8: matchmaking.AssignMatchResponse
	(*ServerStatusUpdateRequest)(nil),  // 9: matchmaking.ServerStatusUpdateRequest
	(*ServerStatusUpdateResponse)(nil), // 10: matchmaking.ServerStatusUpdateResponse
	(*PingRequest)(nil),                // 11: matchmaking.PingRequest
	(*PingResponse)(nil),               // 12: matchmaking.PingResponse
	(*AdminRequest)(nil),               // 13: matchmaking.AdminRequest
	(*ServerInfo)(nil),                 // 14: matchmaking.ServerInfo
	(*PlayerQueueEntry)(nil),           // 15: matchmaking.PlayerQueueEntry
	(*SystemStatusResponse)(nil),       // 16: matchmaking.SystemStatusResponse
	(*AdminServerUpdateRequest)(nil),   // 17: matchmaking.AdminServerUpdateRequest
	(*AdminUpdateResponse)(nil),        // 18: matchmaking.AdminUpdateResponse
	(*timestamppb.Timestamp)(nil),      // 19: google.protobuf.Timestamp
}
var file_proto_matchmaking_proto_depIdxs = []int32{
	2,  // 0: matchmaking.PlayerInfoRequest.clock:type_name -> matchmaking.VectorClock
	2,  // 1: matchmaking.QueuePlayerResponse.clock:type_name -> matchmaking.VectorClock
	2,  // 2: matchmaking.PlayerStatusRequest.clock:type_name -> matchmaking.VectorClock
	0,  // 3: matchmaking.PlayerStatusResponse.state:type_name -> matchmaking.PlayerState
	2,  // 4: matchmaking.PlayerStatusResponse.clock:type_name -> matchmaking.VectorClock
	2,  // 5: matchmaking.AssignMatchRequest.clock:type_name -> matchmaking.VectorClock
	2,  // 6: matchmaking.AssignMatchResponse.clock:type_name -> matchmaking.VectorClock
	1,  // 7: matchmaking.ServerStatusUpdateRequest.new_state:type_name -> matchmaking.ServerState
	2,  // 8: matchmaking.ServerStatusUpdateRequest.clock:type_name -> matchmaking.VectorClock
	2,  // 9: matchmaking.ServerStatusUpdateResponse.clock:type_name -> matchmaking.VectorClock
	1,  // 10: matchmaking.ServerInfo.state:type_name -> matchmaking.ServerState
	19, // 11: matchmaking.PlayerQueueEntry.queued_since:type_name -> google.protobuf.Timestamp
	14, // 12: matchmaking.SystemStatusResponse.servers:type_name -> matchmaking.ServerInfo
	15, // 13: matchmaking.SystemStatusResponse.players:type_name -> matchmaking.PlayerQueueEntry
	2,  // 14: matchmaking.SystemStatusResponse.clock:type_name -> matchmaking.VectorClock
	1,  // 15: matchmaking.AdminServerUpdateRequest.forced_state:type_name -> matchmaking.ServerState
	2,  // 16: matchmaking.AdminServerUpdateRequest.clock:type_name -> matchmaking.VectorClock
	2,  // 17: matchmaking.AdminUpdateResponse.clock:type_name -> matchmaking.VectorClock
	3,  // 18: matchmaking.MatchmakerService.QueuePlayer:input_type -> matchmaking.PlayerInfoRequest
	5,  // 19: matchmaking.MatchmakerService.GetPlayerStatus:input_type -> matchmaking.PlayerStatusRequest
	13, // 20: matchmaking.MatchmakerService.AdminGetSystemStatus:input_type -> matchmaking.AdminRequest
	17, // 21: matchmaking.MatchmakerService.AdminUpdateServerState:input_type -> matchmaking.AdminServerUpdateRequest
	7,  // 22: matchmaking.GameServerService.AssignMatch:input_type -> matchmaking.AssignMatchRequest
	9,  // 23: matchmaking.GameServerService.UpdateServerStatus:input_type -> matchmaking.ServerStatusUpdateRequest
	11, // 24: matchmaking.GameServerService.PingServer:input_type -> matchmaking.PingRequest
	4,  // 25: matchmaking.MatchmakerService.QueuePlayer:output_type -> matchmaking.QueuePlayerResponse
	6,  // 26: matchmaking.MatchmakerService.GetPlayerStatus:output_type -> matchmaking.PlayerStatusResponse
	16, // 27: matchmaking.MatchmakerService.AdminGetSystemStatus:output_type -> matchmaking.SystemStatusResponse
	18, // 28: matchmaking.MatchmakerService.AdminUpdateServerState:output_type -> matchmaking.AdminUpdateResponse
	8,  // 29: matchmaking.GameServerService.AssignMatch:output_type -> matchmaking.AssignMatchResponse
	10, // 30: matchmaking.GameServerService.UpdateServerStatus:output_type -> matchmaking.ServerStatusUpdateResponse
	12, // 31: matchmaking.GameServerService.PingServer:output_type -> matchmaking.PingResponse
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_matchmaking_proto_init() }
func file_proto_matchmaking_proto_init() {
	if File_proto_matchmaking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_matchmaking_proto_rawDesc), len(file_proto_matchmaking_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_matchmaking_proto_goTypes,
		DependencyIndexes: file_proto_matchmaking_proto_depIdxs,
		EnumInfos:         file_proto_matchmaking_proto_enumTypes,
		MessageInfos:      file_proto_matchmaking_proto_msgTypes,
	}.Build()
	File_proto_matchmaking_proto = out.File
	file_proto_matchmaking_proto_goTypes = nil
	file_proto_matchmaking_proto_depIdxs = nil
}
