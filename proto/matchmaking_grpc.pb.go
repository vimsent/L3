// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/matchmaking.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MatchmakerService_QueuePlayer_FullMethodName            = "/matchmaking.MatchmakerService/QueuePlayer"
	MatchmakerService_GetPlayerStatus_FullMethodName        = "/matchmaking.MatchmakerService/GetPlayerStatus"
	MatchmakerService_AdminGetSystemStatus_FullMethodName   = "/matchmaking.MatchmakerService/AdminGetSystemStatus"
	MatchmakerService_AdminUpdateServerState_FullMethodName = "/matchmaking.MatchmakerService/AdminUpdateServerState"
)

// MatchmakerServiceClient is the client API for MatchmakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ────────────── SERVICIOS ─────────────
type MatchmakerServiceClient interface {
	// API para Jugadores
	QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error)
	GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error)
	// API para Cliente Administrador
	AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error)
	AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error)
}

type matchmakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerServiceClient(cc grpc.ClientConnInterface) MatchmakerServiceClient {
	return &matchmakerServiceClient{cc}
}

func (c *matchmakerServiceClient) QueuePlayer(ctx context.Context, in *PlayerInfoRequest, opts ...grpc.CallOption) (*QueuePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueuePlayerResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_QueuePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerServiceClient) GetPlayerStatus(ctx context.Context, in *PlayerStatusRequest, opts ...grpc.CallOption) (*PlayerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerStatusResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_GetPlayerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerServiceClient) AdminGetSystemStatus(ctx context.Context, in *AdminRequest, opts ...grpc.CallOption) (*SystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatusResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_AdminGetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerServiceClient) AdminUpdateServerState(ctx context.Context, in *AdminServerUpdateRequest, opts ...grpc.CallOption) (*AdminUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUpdateResponse)
	err := c.cc.Invoke(ctx, MatchmakerService_AdminUpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServiceServer is the server API for MatchmakerService service.
// All implementations must embed UnimplementedMatchmakerServiceServer
// for forward compatibility.
//
// ────────────── SERVICIOS ─────────────
type MatchmakerServiceServer interface {
	// API para Jugadores
	QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error)
	GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error)
	// API para Cliente Administrador
	AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error)
	AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error)
	mustEmbedUnimplementedMatchmakerServiceServer()
}

// UnimplementedMatchmakerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakerServiceServer struct{}

func (UnimplementedMatchmakerServiceServer) QueuePlayer(context.Context, *PlayerInfoRequest) (*QueuePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePlayer not implemented")
}
func (UnimplementedMatchmakerServiceServer) GetPlayerStatus(context.Context, *PlayerStatusRequest) (*PlayerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStatus not implemented")
}
func (UnimplementedMatchmakerServiceServer) AdminGetSystemStatus(context.Context, *AdminRequest) (*SystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetSystemStatus not implemented")
}
func (UnimplementedMatchmakerServiceServer) AdminUpdateServerState(context.Context, *AdminServerUpdateRequest) (*AdminUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateServerState not implemented")
}
func (UnimplementedMatchmakerServiceServer) mustEmbedUnimplementedMatchmakerServiceServer() {}
func (UnimplementedMatchmakerServiceServer) testEmbeddedByValue()                           {}

// UnsafeMatchmakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServiceServer will
// result in compilation errors.
type UnsafeMatchmakerServiceServer interface {
	mustEmbedUnimplementedMatchmakerServiceServer()
}

func RegisterMatchmakerServiceServer(s grpc.ServiceRegistrar, srv MatchmakerServiceServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MatchmakerService_ServiceDesc, srv)
}

func _MatchmakerService_QueuePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).QueuePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_QueuePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).QueuePlayer(ctx, req.(*PlayerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakerService_GetPlayerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).GetPlayerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_GetPlayerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).GetPlayerStatus(ctx, req.(*PlayerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakerService_AdminGetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).AdminGetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_AdminGetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).AdminGetSystemStatus(ctx, req.(*AdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchmakerService_AdminUpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServerUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServiceServer).AdminUpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchmakerService_AdminUpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServiceServer).AdminUpdateServerState(ctx, req.(*AdminServerUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchmakerService_ServiceDesc is the grpc.ServiceDesc for MatchmakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchmakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.MatchmakerService",
	HandlerType: (*MatchmakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueuePlayer",
			Handler:    _MatchmakerService_QueuePlayer_Handler,
		},
		{
			MethodName: "GetPlayerStatus",
			Handler:    _MatchmakerService_GetPlayerStatus_Handler,
		},
		{
			MethodName: "AdminGetSystemStatus",
			Handler:    _MatchmakerService_AdminGetSystemStatus_Handler,
		},
		{
			MethodName: "AdminUpdateServerState",
			Handler:    _MatchmakerService_AdminUpdateServerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/matchmaking.proto",
}

const (
	GameServerService_AssignMatch_FullMethodName        = "/matchmaking.GameServerService/AssignMatch"
	GameServerService_UpdateServerStatus_FullMethodName = "/matchmaking.GameServerService/UpdateServerStatus"
	GameServerService_PingServer_FullMethodName         = "/matchmaking.GameServerService/PingServer"
)

// GameServerServiceClient is the client API for GameServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServerServiceClient interface {
	// Invocado por el Matchmaker
	AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error)
	// Invocado por el GameServer hacia el Matchmaker
	UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error)
	// Health-check opcional
	PingServer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type gameServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServerServiceClient(cc grpc.ClientConnInterface) GameServerServiceClient {
	return &gameServerServiceClient{cc}
}

func (c *gameServerServiceClient) AssignMatch(ctx context.Context, in *AssignMatchRequest, opts ...grpc.CallOption) (*AssignMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignMatchResponse)
	err := c.cc.Invoke(ctx, GameServerService_AssignMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) UpdateServerStatus(ctx context.Context, in *ServerStatusUpdateRequest, opts ...grpc.CallOption) (*ServerStatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServerStatusUpdateResponse)
	err := c.cc.Invoke(ctx, GameServerService_UpdateServerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServerServiceClient) PingServer(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GameServerService_PingServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServerServiceServer is the server API for GameServerService service.
// All implementations must embed UnimplementedGameServerServiceServer
// for forward compatibility.
type GameServerServiceServer interface {
	// Invocado por el Matchmaker
	AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error)
	// Invocado por el GameServer hacia el Matchmaker
	UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error)
	// Health-check opcional
	PingServer(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedGameServerServiceServer()
}

// UnimplementedGameServerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServerServiceServer struct{}

func (UnimplementedGameServerServiceServer) AssignMatch(context.Context, *AssignMatchRequest) (*AssignMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMatch not implemented")
}
func (UnimplementedGameServerServiceServer) UpdateServerStatus(context.Context, *ServerStatusUpdateRequest) (*ServerStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerStatus not implemented")
}
func (UnimplementedGameServerServiceServer) PingServer(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingServer not implemented")
}
func (UnimplementedGameServerServiceServer) mustEmbedUnimplementedGameServerServiceServer() {}
func (UnimplementedGameServerServiceServer) testEmbeddedByValue()                           {}

// UnsafeGameServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServerServiceServer will
// result in compilation errors.
type UnsafeGameServerServiceServer interface {
	mustEmbedUnimplementedGameServerServiceServer()
}

func RegisterGameServerServiceServer(s grpc.ServiceRegistrar, srv GameServerServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameServerService_ServiceDesc, srv)
}

func _GameServerService_AssignMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).AssignMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerService_AssignMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).AssignMatch(ctx, req.(*AssignMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_UpdateServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).UpdateServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerService_UpdateServerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).UpdateServerStatus(ctx, req.(*ServerStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameServerService_PingServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServerServiceServer).PingServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameServerService_PingServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServerServiceServer).PingServer(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameServerService_ServiceDesc is the grpc.ServiceDesc for GameServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.GameServerService",
	HandlerType: (*GameServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMatch",
			Handler:    _GameServerService_AssignMatch_Handler,
		},
		{
			MethodName: "UpdateServerStatus",
			Handler:    _GameServerService_UpdateServerStatus_Handler,
		},
		{
			MethodName: "PingServer",
			Handler:    _GameServerService_PingServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/matchmaking.proto",
}
